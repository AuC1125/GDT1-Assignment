//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""walking"",
            ""id"": ""6871b504-7ebc-4800-8191-4982f983c868"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""9f1d5771-0420-4306-8003-f27a147b6eb8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""36c244df-a891-42b0-a28c-e0748dc20d4b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eb288a21-b8c0-4792-bca9-4da75f9ed728"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e8973505-c538-4454-8b72-84002ff11880"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""85f7de41-dce8-46ed-b6fc-bf981825e911"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8d85b9f3-135a-482d-ae1e-1b85c21bdc2c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""reticle"",
            ""id"": ""0c2b4297-4bb0-446e-bbce-b4aaf38f7a66"",
            ""actions"": [
                {
                    ""name"": ""aiming"",
                    ""type"": ""Value"",
                    ""id"": ""02a9f7e8-4f6e-4814-85ee-6b27fdf1b756"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""77a537a8-00d6-45df-8f1c-8eae87e4762c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // walking
        m_walking = asset.FindActionMap("walking", throwIfNotFound: true);
        m_walking_movement = m_walking.FindAction("movement", throwIfNotFound: true);
        // reticle
        m_reticle = asset.FindActionMap("reticle", throwIfNotFound: true);
        m_reticle_aiming = m_reticle.FindAction("aiming", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // walking
    private readonly InputActionMap m_walking;
    private List<IWalkingActions> m_WalkingActionsCallbackInterfaces = new List<IWalkingActions>();
    private readonly InputAction m_walking_movement;
    public struct WalkingActions
    {
        private @PlayerActions m_Wrapper;
        public WalkingActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @movement => m_Wrapper.m_walking_movement;
        public InputActionMap Get() { return m_Wrapper.m_walking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WalkingActions set) { return set.Get(); }
        public void AddCallbacks(IWalkingActions instance)
        {
            if (instance == null || m_Wrapper.m_WalkingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WalkingActionsCallbackInterfaces.Add(instance);
            @movement.started += instance.OnMovement;
            @movement.performed += instance.OnMovement;
            @movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IWalkingActions instance)
        {
            @movement.started -= instance.OnMovement;
            @movement.performed -= instance.OnMovement;
            @movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IWalkingActions instance)
        {
            if (m_Wrapper.m_WalkingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWalkingActions instance)
        {
            foreach (var item in m_Wrapper.m_WalkingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WalkingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WalkingActions @walking => new WalkingActions(this);

    // reticle
    private readonly InputActionMap m_reticle;
    private List<IReticleActions> m_ReticleActionsCallbackInterfaces = new List<IReticleActions>();
    private readonly InputAction m_reticle_aiming;
    public struct ReticleActions
    {
        private @PlayerActions m_Wrapper;
        public ReticleActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @aiming => m_Wrapper.m_reticle_aiming;
        public InputActionMap Get() { return m_Wrapper.m_reticle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ReticleActions set) { return set.Get(); }
        public void AddCallbacks(IReticleActions instance)
        {
            if (instance == null || m_Wrapper.m_ReticleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ReticleActionsCallbackInterfaces.Add(instance);
            @aiming.started += instance.OnAiming;
            @aiming.performed += instance.OnAiming;
            @aiming.canceled += instance.OnAiming;
        }

        private void UnregisterCallbacks(IReticleActions instance)
        {
            @aiming.started -= instance.OnAiming;
            @aiming.performed -= instance.OnAiming;
            @aiming.canceled -= instance.OnAiming;
        }

        public void RemoveCallbacks(IReticleActions instance)
        {
            if (m_Wrapper.m_ReticleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IReticleActions instance)
        {
            foreach (var item in m_Wrapper.m_ReticleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ReticleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ReticleActions @reticle => new ReticleActions(this);
    public interface IWalkingActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IReticleActions
    {
        void OnAiming(InputAction.CallbackContext context);
    }
}
